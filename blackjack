from shoe import Shoe
from hand import *
from card import Card
from basic_strategy import *

def blackjack_statistics(iterations=1000, shoe_size=4):
    '''
    Main function for playing the game of blackjack and aquiring data associated with games.
    Parameters:
    iterations - the number of times a game of blackjack will be played.
    shoe_size - the number of decks that will be used in the shoe
    '''

    shoe = Shoe(shoe_size) # always start with a fresh shoe.
    shoe.shuffle()

    for i in range(iterations):
        print('----------')
        print(f'Game #{i+1}.')
        # initialize dealer hand, player hand

        if shoe.amount_left() < 50: # checks to see if shoe is less than 50% full.
            #print('The shoe is less than 50 percent full. Re-shuffling the deck.')
            shoe = Shoe(shoe_size)
            shoe.shuffle()

        player, dealer = deal_initial_cards(shoe)

        initial_blackjack = check_initial_blackjack(player,dealer)

        # for debugging purposes
        if initial_blackjack == 'pwin':
            print(f'Player wins with initial blackjack. {player.display_hand()} Countinuing')
            continue
        elif initial_blackjack == 'dwin':
            print(f'Dealer wins with initial blackjack. {dealer.display_hand()} Countinuing')
            continue
        elif initial_blackjack == 'pbj':
            print(f'It\'s a push! Dealer has {dealer.display_hand()} and player has {player.display_hand()} Countinuing')
            continue

        # Make decisions for initial hand
        initial_decision = initial_player_decision(player, dealer, shoe)


        




def deal_initial_cards(shoe):
    '''
    This function is used to create and deal the initial cards to the players as well as the dealer.
    Creates a player of PlayerHand class and dealer of Hand class and adds two cards.
    Shoe loses 4 cards.
    '''
    player = PlayerHand()
    dealer = Hand()

    for _ in range(2):
        player.add_card(shoe.deal_card()) # by deafult this deals to the first hand in the deck.
        dealer.add_card(shoe.deal_card())
    
    print("Dealing initial cards...")
    print("Player's hand:", player.display_hand())
    print("Dealer's upcard:", dealer.show_upcard())

    return player, dealer

def check_initial_blackjack(player,dealer):
    '''
    This function is used in the main blackjack function. It's purpose is to evaluate wheter the
    player or dealer have hit blackjack. In the game of blackjack, a card total of 21 off the initial
    deal is an instant win.
    Takes the player and dealer hand as parameters, returns pwin to represent  an instant player win
    dwin is is used to represent a dealer win. pbj represents a push as both sides have blackjack
    If there is no return then there is no blackjack and
    the game can countinue as normal. 
    '''
    if player.total_value() == 21:
        if dealer.total_value() == 21:
            return 'pbj'
        return 'pwin'
    if dealer.total_value() ==  21:
        return 'dwin'
    return

def initial_player_decision(player,dealer,shoe):
    '''
    This function will be used to return a decision after the initial deal of cards.
    Parameters:
    player - the players hand, playerHand class
    dealer - the dealers hand
    shoe - the shoe that cards are being dealt from
    will return a decision, either H,S,D,P : Hit, stand, double, split.
    '''

    handType = initial_hand_type(player)
    decision = basicStrategy(handType, player, dealer.show_upcard())
    
    if decision == 'S':
        print(f'Stand. Player hand is {player.display_hand()}')
        return 'S'
    
    if decision == 'H':
        # if the player decides to hit, then they should be dealt a card.
        player.add_card(shoe.deal_card())
        print(f'Hit. Player hand is now {player.display_hand()}')
        return 'H'
    
    if decision == 'P':
        player.execute_split(shoe)
        print(f'Split. Player hands are now {player.display_hand()}')
        return 'P'
    
    if decision == 'D':
        player.add_card(shoe.deal_card())
        print(f'Doubling down. Player hand is now {player.display_hand()}')
        return 'D'

def initial_hand_type(playerHand):
    '''
    Helper function for player decision.
    The purpose of this function is to return the type of hand the player has. This is required for basic strategy
    Types of hands
    Split: If the players two cards are the same then they can be "split" into two different hands. For instance, if the player is dealt two aces,
    and chooses to split, then the player will now have two hands. each of those hands will have an ace as well as a random card dealt from the shoe.
    Soft: A soft hand can be one of two values. This is because of blackjacks ace property. Aces are either counter as 1 or 11
    Hard: Every other type of hand is considered hard.
    '''
    if playerHand.can_split():
        # both hands are equal suit, they are under the split category
        return 'split'
    elif playerHand.is_soft():
        return 'soft'
    return 'hard'


if __name__=='__main__':
    blackjack_statistics()