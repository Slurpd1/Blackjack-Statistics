from shoe import Shoe
from hand import *
from card import Card
from basic_strategy import *

def blackjack_statistics(shoe_size=4):

    dealer = Hand()
    player = PlayerHand()
    shoe = Shoe(shoe_size)
    shoe.shuffle()

    for i in range(1000):
        # each time this loop completes a game has been played
        # first check if shoe is less than 50% full
        if shoe.amount_left() < 50:
            shoe = Shoe()
        
        deal_initial_cards(player, dealer, shoe)
        # now everyone has their initial cards

        # now the player must decide what to do with the cards he has dealt vs the dealer
        decision = player_decision(player,dealer,shoe)

        print(player.display_hand(), dealer.show_upcard())
        print(decision)

        player.clear()
        dealer.clear()







def deal_initial_cards(player, dealer, shoe):
    """Deal initial cards to the player and dealer."""
    for _ in range(2):
        player.add_card(shoe.deal_card())
        dealer.add_card(shoe.deal_card())

def player_decision(player,dealer,shoe):
    handType = initialHandType(player)
    # this will return the type of hand we have, soft hard or split
    decision = basicStrategy(handType, player, dealer.show_upcard())
    return decision

def initialHandType(playerHand):
    if playerHand.can_split():
        # both hands are equal suit, they are under the split category
        return 'split'
    elif playerHand.is_soft():
        return 'soft'
    playerHand.display_hand()
    return 'hard'




if __name__=='__main__':
    blackjack_statistics()