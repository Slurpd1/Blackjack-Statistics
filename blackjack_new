from shoe import Shoe
from hand import *
from card import Card
from basic_strategy import *

def blackjack(iterations=100, shoe_size=4):
    '''
    Main function for playing the game of blackjack and aquiring data associated with games.
    Parameters:
    iterations - the number of times a game of blackjack will be played.
    shoe_size - the number of decks that will be used in the shoe
    '''
    # shoe must be initalized before the game
    shoe = Shoe(shoe_size)
    shoe.shuffle()

    for i in range(iterations):
        print('----------')
        print(f'Game #{i+1}.')
        # initialize dealer hand, player hand

        # this code cannot be made into a function as it needs to affect the shoes variable. must be kept in the main code.
        if shoe.amount_left() < 50: # checks to see if shoe is less than 50% full.
            print('The shoe is less than 50 percent full. Re-shuffling the deck.')
            shoe = Shoe()
            shoe.shuffle()

        dealer = Hand()
        player = PlayerHand()
        deal_initial_cards(player,dealer,shoe)

        # after the initial cards are dealt the player or dealer can have blackjack. this needs to be handled using the

        # now the hands have been dealt and the player must make a decision. using a while loop as the player can make multiple decisions in one turn
        while decision != 'S':
            decision = player_decision(player,dealer,shoe) # the code up to this line has been tested to 100 000 iterations. working ok
            execute_decision(player,dealer,decision,shoe)
            # now that we have a player decision we must process this
        
        # now that we have exited the loop the player has either busted or is staying on their hands.

        

def execute_decision(player,dealer,decision,shoe):
    if decision == 'S':
        return
    
    if decision == 'H':
        # if the player decides to hit, then they should be dealt a card.
        player.add_card(shoe.deal_card())
        
    if decision == 'P':
        print('splitting')
    if len(decision) == 2:
        print('doubling')

def dealer_turn(dealer,shoe):
    '''
    Used as a helper function inside of the blackjack function. This function is used after the players turn has concluded. The dealer will countinue to add cards to their
    deck until the total is greater than or equal to 17, or the dealer busts.
    Takes the dealers hand as a parameter and the shoe the game is being played with.
    Returns one of two values, dbust and dstay
    dbust means the dealer has busted. the player wins the hand
    dstay means the dealer has stayed on their hand. The dealer and player hand now has to go to a final evaluation.
    '''

    while dealer.total_value() < 17:
        dealer.add_card(shoe.deal_card())

    # now we have exited. If the dealer value is over 21 then the dealer has busted
    if dealer.total_value() > 21:
        return 'dbust'
    # otherwise, the dealer value is between 17 and 21. dealer is staying
    return 'dstay'



def debug_print_initial():
    '''
    This function will be used to debug the inital part of the game. It will ensure everything is set up correctly.
    '''
    pass
    
def deal_initial_cards(player, dealer, shoe):
    '''
    This function is used to deal the initial cards to the players as well as the dealer.
    Modifies player and dealer by adding two cards.
    Shoe loses 4 cards.
    DEBUGGING is included for now. with the use of print statements/
    '''
    for _ in range(2):
        player.add_card(shoe.deal_card()) # by deafult this deals to the first hand in the deck.
        dealer.add_card(shoe.deal_card())
    print("Dealing initial cards...")
    print("Player's hand:", player.display_hand())
    print("Dealer's upcard:", dealer.show_upcard())

def player_decision(player,dealer,shoe):
    '''
    This function will be used to return a decision after the initial deal of cards.
    Parameters:
    player - the players hand
    dealer - the dealers hand
    shoe - the shoe that cards are being dealt from
    will return a decision, either H,S,D,P : Hit, stand, double, split.
    '''
    handType = initialHandType(player)
    # this will return the type of hand we have, soft hard or split
    decision = basicStrategy(handType, player, dealer.show_upcard())
    return decision

def initialHandType(playerHand):
    '''
    Helper function for player decision.
    The purpose of this function is to return the type of hand the player has. This is required for basic strategy
    Types of hands
    Split: If the players two cards are the same then they can be "split" into two different hands. For instance, if the player is dealt two aces,
    and chooses to split, then the player will now have two hands. each of those hands will have an ace as well as a random card dealt from the shoe.
    Soft: A soft hand can be one of two values. This is because of blackjacks ace property. Aces are either counter as 1 or 11
    Hard: Every other type of hand is considered hard.
    '''
    if playerHand.can_split():
        # both hands are equal suit, they are under the split category
        return 'split'
    elif playerHand.is_soft():
        return 'soft'
    playerHand.display_hand()
    return 'hard'


if __name__ == '__main__':
    blackjack(100,4)
